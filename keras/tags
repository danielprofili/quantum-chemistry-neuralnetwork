!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Activation	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Activation	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Dense	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Dense	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Input	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Input	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
K	NN_qc_fit_main.py	/^import keras.backend as K$/;"	i
K	construct_NN.py	/^import keras.backend as K$/;"	i
LA	routines2.py	/^from numpy import linalg as LA$/;"	i
LA	symmetry_functions.py	/^from numpy import linalg as LA$/;"	i
Lambda	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Lambda	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
LocallyConnected1D	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
LocallyConnected1D	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
Model	NN_qc_fit_main.py	/^from keras.models import Model, Sequential$/;"	i
Model	construct_NN.py	/^from keras.models import Model, Sequential$/;"	i
NNff	NN_qc_fit_main.py	/^NNff = NNforce_field( 'FF3', aname )$/;"	v
NNforce_field	force_field_parameters.py	/^class NNforce_field(object):$/;"	c
Sequential	NN_qc_fit_main.py	/^from keras.models import Model, Sequential$/;"	i
Sequential	construct_NN.py	/^from keras.models import Model, Sequential$/;"	i
__init__	force_field_parameters.py	/^    def __init__(self):$/;"	m	class:elementNN
__init__	force_field_parameters.py	/^    def __init__(self, name, aname=["H", "O"]):$/;"	m	class:NNforce_field
add	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
add	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
argparse	generate_input.py	/^import argparse$/;"	i
charges	NN_qc_fit_main.py	/^charges = charges[0:3]$/;"	v
compute_displacements	routines2.py	/^def compute_displacements( xyz ):$/;"	f
concatenate	NN_qc_fit_main.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
concatenate	construct_NN.py	/^from keras.layers import Input, Lambda, Dense, Activation, concatenate, add, LocallyConnected1D$/;"	i
construct_NN_Model	NN_qc_fit_main.py	/^from construct_NN import construct_NN_Model$/;"	i
construct_NN_Model	construct_NN.py	/^def construct_NN_Model( sym_input, NNff, aname):$/;"	f
construct_symmetry_input	routines2.py	/^def construct_symmetry_input( NN , rij, aname ):$/;"	f
create_atype_list	routines2.py	/^def create_atype_list( aname ):$/;"	f
cutoff_function	symmetry_functions.py	/^def cutoff_function( rmag , Rc ):$/;"	f
elementNN	force_field_parameters.py	/^class elementNN(object):$/;"	c
gen	NN_qc_fit_main.py	/^import generate_input as gen$/;"	i
get_atom_names	generate_input.py	/^def get_atom_names(inputfile):$/;"	f
get_dists	generate_input.py	/^def get_dists(xyz):$/;"	f
get_test_data	get_test_data.py	/^def get_test_data():$/;"	f
gt	NN_qc_fit_main.py	/^import get_test_data as gt$/;"	i
history	NN_qc_fit_main.py	/^history=model.fit( sym_input , charges, batch_size=20, epochs=5000, validation_split=0.1 )$/;"	v
initialize_FF1	force_field_parameters.py	/^    def initialize_FF1(self):$/;"	m	class:NNforce_field
initialize_FF2	force_field_parameters.py	/^    def initialize_FF2(self):$/;"	m	class:NNforce_field
initialize_FF3	force_field_parameters.py	/^    def initialize_FF3(self):$/;"	m	class:NNforce_field
inputfile	NN_qc_fit_main.py	/^inputfile='input.qc'$/;"	v
keras	NN_qc_fit_main.py	/^import keras.backend as K$/;"	i
keras	construct_NN.py	/^import keras.backend as K$/;"	i
model	NN_qc_fit_main.py	/^model = construct_NN_Model( sym_input, NNff, aname )$/;"	v
np	NN_qc_fit_main.py	/^import numpy as np$/;"	i
np	construct_NN.py	/^import numpy as np$/;"	i
np	force_field_parameters.py	/^import numpy as np$/;"	i
np	generate_input.py	/^import numpy as np$/;"	i
np	get_test_data.py	/^import numpy as np$/;"	i
np	routines2.py	/^import numpy as np$/;"	i
np	symmetry_functions.py	/^import numpy as np$/;"	i
parse_input	generate_input.py	/^def parse_input(inputfile):$/;"	f
radial_gaussian	symmetry_functions.py	/^def radial_gaussian( rij, i_atom , width, rshift, Rc ):$/;"	f
re	generate_input.py	/^import re$/;"	i
read_sapt_data2	routines2.py	/^def read_sapt_data2( inputfile ):$/;"	f
rij	NN_qc_fit_main.py	/^rij = rij[:,:,1:4]$/;"	v
routines	NN_qc_fit_main.py	/^import routines2 as routines$/;"	i
routines	construct_NN.py	/^import routines2 as routines$/;"	i
scale_symmetry_input	routines2.py	/^def scale_symmetry_input( sym_input ):$/;"	f
set_modeller_coordinates	routines2.py	/^def set_modeller_coordinates( pdb , modeller , xyz_in ):$/;"	f
sym	NN_qc_fit_main.py	/^import symmetry_functions as sym$/;"	i
sym	construct_NN.py	/^import symmetry_functions as sym$/;"	i
sym	routines2.py	/^import symmetry_functions as sym$/;"	i
sym_input	NN_qc_fit_main.py	/^sym_input = routines.construct_symmetry_input( NNff , rij , aname )$/;"	v
sys	NN_qc_fit_main.py	/^import sys$/;"	i
sys	construct_NN.py	/^import sys$/;"	i
sys	force_field_parameters.py	/^import sys$/;"	i
sys	generate_input.py	/^import sys$/;"	i
sys	routines2.py	/^import sys$/;"	i
sys	symmetry_functions.py	/^import sys$/;"	i
test_symmetry_input	routines2.py	/^def test_symmetry_input(sym_input):$/;"	f
tf	NN_qc_fit_main.py	/^import tensorflow as tf$/;"	i
tf	construct_NN.py	/^import tensorflow as tf$/;"	i
y	NN_qc_fit_main.py	/^y = model.predict_on_batch( sym_input )$/;"	v
